(defun main (source)
  (let ((i 0)
        (acc (make-array 1000 :fill-pointer 0 ))
        (cpu (make-array 30000 :element-type 'number :initial-element 0))
        (brc 0))
    (with-open-file (s source)
      (loop for char = (read-char s nil :eof)
            until (eql char :eof)
            do (vector-push-extend char acc)))
    (dotimes (j (length acc)) 
          (case (aref acc j)
            (#\> (incf i))
            (#\< (decf i))
            (#\+ (incf (aref cpu i)))
            (#\- (decf (aref cpu i)))
            (#\. (princ (code-char (aref cpu i))))
            (#\, (setf (aref cpu i) (char-code (read-char))))
            (#\[ (if (= 0 (aref cpu i))
                     (progn
                       (incf brc)
                       (loop while (/= 0 brc)
                             do (incf j)
                                (if (eql (aref acc j) #\[)
                                    (incf brc))
                                (if (eql (aref acc j) #\])
                                    (decf brc))))))
            (#\] (if (/= 0 (aref cpu i))
                     (progn
                       (if (eql (aref acc j) #\])
                           (incf brc))
                       (loop while (/= 0 brc)
                             do (decf j)
                                (cond ((eql (aref acc j) #\[) (decf brc))
                                      ((eql (aref acc j) #\]) (incf brc))))
                       (decf j))))))))
